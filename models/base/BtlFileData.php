<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3btl\models\base;

use Yii;
use d3system\behaviors\D3DateTimeBehavior;

/**
 * This is the base-model class for table "btl_file_data".
 *
 * @property integer $id
 * @property string $status
 * @property string $file_data
 * @property string $parsed_data
 * @property string $add_time
 * @property string $notes
 * @property string $project_name
 * @property string $export_datetime
 * @property string $file_name
 *
 * @property \d3yii2\d3btl\models\BtlPart[] $btlParts
 * @property string $aliasModel
 */
abstract class BtlFileData extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    public const STATUS_PROCESSED = 'processed';
    public const STATUS_ERROR = 'error';
    public const STATUS_DELETED = 'deleted';
    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'btl_file_data';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = [
        ];
        $behaviors = array_merge(
            $behaviors,
            D3DateTimeBehavior::getConfig(['add_time','export_datetime'])
        );
        return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            'enum-status' => ['status', 'in', 'range' => [
                    self::STATUS_PROCESSED,
                    self::STATUS_ERROR,
                    self::STATUS_DELETED,
                ]
            ],
            'integer Unsigned' => [['id'],'integer' ,'min' => 0 ,'max' => 4294967295],
            [['status', 'file_data', 'parsed_data'], 'string'],
            [['add_time', 'export_datetime'], 'safe'],
            [['notes', 'file_name'], 'string', 'max' => 255],
            [['project_name'], 'string', 'max' => 200],
            'D3DateTimeBehavior' => [['add_time_local','export_datetime_local'],'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d3btl', 'ID'),
            'status' => Yii::t('d3btl', 'Status'),
            'file_data' => Yii::t('d3btl', 'File Data'),
            'parsed_data' => Yii::t('d3btl', 'Parsed Data'),
            'add_time' => Yii::t('d3btl', 'Add Time'),
            'notes' => Yii::t('d3btl', 'Notes'),
            'project_name' => Yii::t('d3btl', 'Project Name'),
            'export_datetime' => Yii::t('d3btl', 'Export Datetime'),
            'file_name' => Yii::t('d3btl', 'File Name'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBtlParts()
    {
        return $this->hasMany(\d3yii2\d3btl\models\BtlPart::className(), ['file_data_id' => 'id']);
    }




    /**
     * get column status enum value label
     * @param string $value
     * @return string
     */
    public static function getStatusValueLabel(string $value): string
    {
        if (!$value) {
            return '';
        }
        $labels = self::optsStatus();
        return $labels[$value] ?? $value;
    }

    /**
     * column status ENUM value labels
     * @return string[]
     */
    public static function optsStatus(): array
    {
        return [
            self::STATUS_PROCESSED => Yii::t('d3btl', 'processed'),
            self::STATUS_ERROR => Yii::t('d3btl', 'error'),
            self::STATUS_DELETED => Yii::t('d3btl', 'deleted'),
        ];
    }
    /**
    * ENUM field values
    */
    /**
     * @return bool
     */
    public function isStatusProcessed(): bool
    {
        return $this->status === self::STATUS_PROCESSED;
    }

     /**
     * @return void
     */
    public function setStatusProcessed(): void
    {
        $this->status = self::STATUS_PROCESSED;
    }
    /**
     * @return bool
     */
    public function isStatusError(): bool
    {
        return $this->status === self::STATUS_ERROR;
    }

     /**
     * @return void
     */
    public function setStatusError(): void
    {
        $this->status = self::STATUS_ERROR;
    }
    /**
     * @return bool
     */
    public function isStatusDeleted(): bool
    {
        return $this->status === self::STATUS_DELETED;
    }

     /**
     * @return void
     */
    public function setStatusDeleted(): void
    {
        $this->status = self::STATUS_DELETED;
    }
}
